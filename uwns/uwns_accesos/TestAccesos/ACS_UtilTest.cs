// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
namespace TestAccesos
{
      /// <summary>
      ///This is a test class for LAP.TUUA.ACCESOS.ACS_Util and is intended
      ///to contain all LAP.TUUA.ACCESOS.ACS_Util Unit Tests
      ///</summary>
      [TestClass()]
      public class ACS_UtilTest
      {


            private TestContext testContextInstance;

            /// <summary>
            ///Gets or sets the test context which provides
            ///information about and functionality for the current test run.
            ///</summary>
            public TestContext TestContext
            {
                  get
                  {
                        return testContextInstance;
                  }
                  set
                  {
                        testContextInstance = value;
                  }
            }
            #region Additional test attributes
            // 
            //You can use the following additional attributes as you write your tests:
            //
            //Use ClassInitialize to run code before running the first test in the class
            //
            //[ClassInitialize()]
            //public static void MyClassInitialize(TestContext testContext)
            //{
            //}
            //
            //Use ClassCleanup to run code after all tests in a class have run
            //
            //[ClassCleanup()]
            //public static void MyClassCleanup()
            //{
            //}
            //
            //Use TestInitialize to run code before running each test
            //
            //[TestInitialize()]
            //public void MyTestInitialize()
            //{
            //}
            //
            //Use TestCleanup to run code after each test has run
            //
            //[TestCleanup()]
            //public void MyTestCleanup()
            //{
            //}
            //
            #endregion


            /// <summary>
            ///A test for ConvertirJulianoCalendario (int)
            ///</summary>
            [DeploymentItem("ACCESOS.exe")]
            [TestMethod()]
            public void ConvertirJulianoCalendarioTest()
            {
                  object target = TestAccesos.LAP_TUUA_ACCESOS_ACS_UtilAccessor.CreatePrivate();

                  TestAccesos.LAP_TUUA_ACCESOS_ACS_UtilAccessor accessor = new TestAccesos.LAP_TUUA_ACCESOS_ACS_UtilAccessor(target);

                  int jd = 165; // TODO: Initialize to an appropriate value

                  string expected = "20090614";
                  string actual;

                  actual = accessor.ConvertirJulianoCalendario(jd);

                  Assert.AreEqual(expected, actual, "LAP.TUUA.ACCESOS.ACS_Util.ConvertirJulianoCalendario did not return the expected " +
                          "value.");
                  
                  //Assert.Inconclusive("Verify the correctness of this test method.");
            }

            /// <summary>
            ///A test for ObtenerCodCompania (string, List&lt;Compania&gt;)
            ///</summary>
            [DeploymentItem("ACCESOS.exe")]
            [TestMethod()]
            public void ObtenerCodCompaniaTest()
            {
                  object target = TestAccesos.LAP_TUUA_ACCESOS_ACS_UtilAccessor.CreatePrivate();

                  TestAccesos.LAP_TUUA_ACCESOS_ACS_UtilAccessor accessor = new TestAccesos.LAP_TUUA_ACCESOS_ACS_UtilAccessor(target);

                  string strAirlineDesign = "AA"; // TODO: Initialize to an appropriate value

                  LAP.TUUA.ENTIDADES.Compania objC1 = new LAP.TUUA.ENTIDADES.Compania();
                  objC1.SCodCompania = "0000000075";
                  objC1.SCodEspecialCompania = "AA";
                  
                  List<LAP.TUUA.ENTIDADES.Compania> lstC =new List<LAP.TUUA.ENTIDADES.Compania>();
                  lstC.Add(objC1);
                  
                  System.Collections.Generic.List<LAP.TUUA.ENTIDADES.Compania> lstCompania = lstC; // TODO: Initialize to an appropriate value

                  string expected = "0000000075";
                  string actual;

                  actual = accessor.ObtenerCodCompania(strAirlineDesign, lstCompania);

                  Assert.AreEqual(expected, actual, "LAP.TUUA.ACCESOS.ACS_Util.ObtenerCodCompania did not return the expected value.");
                  
                  //Assert.Inconclusive("Verify the correctness of this test method.");
            }

            /// <summary>
            ///A test for ObtenerTicket (string)
            ///</summary>
            [DeploymentItem("ACCESOS.exe")]
            [TestMethod()]
            public void ObtenerTicketTest()
            {
                  object target = TestAccesos.LAP_TUUA_ACCESOS_ACS_UtilAccessor.CreatePrivate();

                  TestAccesos.LAP_TUUA_ACCESOS_ACS_UtilAccessor accessor = new TestAccesos.LAP_TUUA_ACCESOS_ACS_UtilAccessor(target);

                  string strTrama = "0ƒ61604922644\rÿaò"; // TODO: Initialize to an appropriate value

                  string expected = "1604922644";
                  string actual;

                  actual = accessor.ObtenerTicket(strTrama);

                  Assert.AreEqual(expected, actual, "LAP.TUUA.ACCESOS.ACS_Util.ObtenerTicket did not return the expected value.");
                  //Assert.Inconclusive("Verify the correctness of this test method.");
            }

            [DeploymentItem("ACCESOS.exe")]
            [TestMethod()]
            public void ObtenerTicketTramaVaciaTest()
            {
                  object target = TestAccesos.LAP_TUUA_ACCESOS_ACS_UtilAccessor.CreatePrivate();

                  TestAccesos.LAP_TUUA_ACCESOS_ACS_UtilAccessor accessor = new TestAccesos.LAP_TUUA_ACCESOS_ACS_UtilAccessor(target);

                  string strTrama = ""; // TODO: Initialize to an appropriate value

                  string expected = "";
                  string actual;

                  actual = accessor.ObtenerTicket(strTrama);

                  Assert.AreEqual(expected, actual, "LAP.TUUA.ACCESOS.ACS_Util.ObtenerTicket did not return the expected value.");
                  //Assert.Inconclusive("Verify the correctness of this test method.");
            }

            [DeploymentItem("ACCESOS.exe")]
            [TestMethod()]
            public void ObtenerTicketTramaNullTest()
            {
                  object target = TestAccesos.LAP_TUUA_ACCESOS_ACS_UtilAccessor.CreatePrivate();

                  TestAccesos.LAP_TUUA_ACCESOS_ACS_UtilAccessor accessor = new TestAccesos.LAP_TUUA_ACCESOS_ACS_UtilAccessor(target);

                  string strTrama = null; // TODO: Initialize to an appropriate value

                  string expected = "";
                  string actual;

                  actual = accessor.ObtenerTicket(strTrama);

                  Assert.AreEqual(expected, actual, "LAP.TUUA.ACCESOS.ACS_Util.ObtenerTicket did not return the expected value.");
                  //Assert.Inconclusive("Verify the correctness of this test method.");
            }

      }


}
